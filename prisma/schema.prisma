// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String   @id // This will be Clerk's user_id
  name        String
  phone       String   @unique
  email       String?
  address     String?
  dateOfBirth DateTime?
  notes       String?
  totalVisits Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@map("customers")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  category    String
  duration    Int      // in minutes
  price       Decimal  @db.Decimal(10, 2)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@map("services")
}

model Stylist {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  specialties String[] // Array of service categories
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@map("stylists")
}

model Appointment {
  id            String   @id @default(cuid())
  customerId    String
  customerName  String   // Denormalized for easier queries
  customerPhone String
  customerEmail String?
  serviceId     String
  serviceName   String   // Denormalized for easier queries
  stylistId     String
  stylistName   String   // Denormalized for easier queries
  date          String   // Format: YYYY-MM-DD
  time          String   // Format: HH:MM
  duration      Int      // in minutes
  price         Decimal  @db.Decimal(10, 2)
  status        AppointmentStatus @default(SCHEDULED)
  notes         String?
  isWalkIn      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  stylist  Stylist  @relation(fields: [stylistId], references: [id], onDelete: Cascade)

  // Indexes for better performance
  @@index([date, time, stylistId])
  @@index([customerPhone])
  @@index([status])
  @@map("appointments")
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}
